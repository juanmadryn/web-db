//** Copyright Statement ***************************************************
//The Salmon Open Framework for Internet Applications (SOFIA)
// Copyright (C) 1999 - 2002, Salmon LLC
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License version 2
// as published by the Free Software Foundation;
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// 
// For more information please visit http://www.salmonllc.com
//** End Copyright Statement ***************************************************
package com.salmonllc.html;

/////////////////////////
//$Archive: /SOFIA/SourceCode/com/salmonllc/html/HtmlComponentFactory.java $
//$Author: Dan $
//$Revision: 26 $
//$Modtime: 6/11/03 4:39p $
/////////////////////////

import com.salmonllc.html.events.SubmitListener;
import com.salmonllc.html.events.ValueChangedListener;
import com.salmonllc.properties.Props;
import com.salmonllc.sql.DataStore;
import com.salmonllc.util.MessageLog;

/**
 * This class can be used to reduce the coding involved in creating a data entry or data browsing screen. The methods in the factory will create the components and automatically bind them to columns in a DataStore, creating the DataStore in the process. Each component must then be added to the page. The datastore component created by the factory can be accessed via a call to the getDataStore method.
 */
public class HtmlComponentFactory {
    DataStore _ds;
    HtmlPage _page;
    SubmitListener _sl;
    ValueChangedListener _vl;
    String _theme;

    public static String DATE_FORMAT;
    public static String TIME_FORMAT;
    public static String DATETIME_FORMAT;
    public static String CURRENCY_FORMAT;
    public static String INT_FORMAT = "########################";

    /**
     * Constructs a new HtmlComponent Factory for the page.
     * @param p The page to create the factory for.
     * @param submit The SubmitListener that will listen for submit events generated by components created in this factory. Set it to null if you don't want the components to generate submit events.
     * @param value The ValueChangedListener that will listen for value changed events generated by components created in this factory. Set it to null if you don't want the components to generate value changed events.
     */
    public HtmlComponentFactory(HtmlPage p, SubmitListener submit, ValueChangedListener value) {

        this(p, submit, value, null);
    }

    /**
     * Constructs a new HtmlComponent Factory for the page.
     * @param p The page to create the factory for.
     * @param submit The SubmitListener that will listen for submit events generated by components created in this factory. Set it to null if you don't want the components to generate submit events.
     * @param value The ValueChangedListener that will listen for value changed events generated by components created in this factory. Set it to null if you don't want the components to generate value changed events.
     * @param theme The theme to use for loading properties.
     */
    public HtmlComponentFactory(HtmlPage p, SubmitListener submit, ValueChangedListener value, String theme) {

        super();
        _page = p;
        _sl = submit;
        _vl = value;
        _ds = new DataStore(p.getApplicationName());

        _theme = theme;

        Props pr = p.getPageProperties();

        DATE_FORMAT = pr.getThemeProperty(theme, Props.DATE_FORMAT);
        TIME_FORMAT = pr.getThemeProperty(theme, Props.DATE_FORMAT);
        DATETIME_FORMAT = pr.getThemeProperty(theme, Props.DATETIME_FORMAT);
        CURRENCY_FORMAT = pr.getThemeProperty(theme, Props.CURRENCY_FORMAT);
    }

    /**
     * Constructs a new HtmlComponent Factory for the page.
     * @param p The page to create the factory for.
     * @param submit The SubmitListener that will listen for submit events generated by components created in this factory. Set it to null if you don't want the components to generate submit events.
     * @param value The ValueChangedListener that will listen for value changed events generated by components created in this factory. Set it to null if you don't want the components to generate value changed events.
     * @param theme The theme to use for loading properties.
     * @param ds DataStore		Data store object to use, if null then create one.
     */
    public HtmlComponentFactory(HtmlPage p, SubmitListener submit, ValueChangedListener value, String theme, DataStore ds) {
        super();
        _page = p;
        _sl = submit;
        _vl = value;
        if (ds == null) {
            _ds = new DataStore(p.getApplicationName());
        } else {
            _ds = ds;
        }
        _theme = theme;
        Props pr = p.getPageProperties();
        DATE_FORMAT = pr.getThemeProperty(theme, Props.DATE_FORMAT);
        TIME_FORMAT = pr.getThemeProperty(theme, Props.DATE_FORMAT);
        DATETIME_FORMAT = pr.getThemeProperty(theme, Props.DATETIME_FORMAT);
        CURRENCY_FORMAT = pr.getThemeProperty(theme, Props.CURRENCY_FORMAT);
    }

    /**
     * This method returns the DataStore created by creating components in the factory.
     */
    public DataStore getDataStore() {
        return _ds;
    }

    /**
     * This method creates a new Computed Column in the DataStore.
     * @param expression The compute Expression.
     * @param format The format to display the results.
     * @see DataStoreEvaluator
     * @see DataStore#setFormat
     */
    public HtmlText newComputedColumn(String expression, String format) {
        return newComputedColumn("", expression, format);
    }

    /**
     * This method creates a new Computed Column in the DataStore.
     * @param expression The name of the compute Expression.
     * @param expression The compute Expression.
     * @param format The format to display the results.
     * @see DataStoreEvaluator
     * @see DataStore#setFormat
     */
    public HtmlText newComputedColumn(String name, String expression, String format) {
        HtmlText computed = new HtmlText(name, "", HtmlText.FONT_DEFAULT, _page, _theme);
        try {
            computed.setExpression(_ds, expression, format);
        } catch (Exception e) {
            computed.setText(e.getMessage());
        }
        return computed;
    }

    /**
     * This method will create an HtmlDataTable from a select statement.
     * @param select The select statement to build the datatable from
     */
    public HtmlDataTable newDataTable(String select) throws Exception {
        _ds.buildBuffer(select);
        HtmlDataTable ret = new HtmlDataTable("", _ds, _page);
        int cc = _ds.getColumnCount();
        for (int i = 0; i < cc; i++) {
            String name = _ds.getColumnName(i);
            int type = _ds.getColumnDataType(i);

            String format = null;
            if (type == DataStore.DATATYPE_DATE)
                format = DATE_FORMAT;
            else if (type == DataStore.DATATYPE_DATETIME)
                format = DATETIME_FORMAT;

            HtmlText col = new HtmlText("", "", HtmlText.FONT_DEFAULT, _page, _theme);
            col.setExpression(_ds, name, format);
            ret.setRowComponentAt(i, col);

            StringBuffer disp = new StringBuffer(name.length());
            for (int j = 0; j < name.length(); j++) {
                char c = name.charAt(j);
                if (c == '.')
                    disp.append("<BR>");
                else if (c == '_')
                    disp.append(' ');
                else
                    disp.append(c);
            }

            HtmlText cap = newTableCaption(disp.toString());
            cap.setFixSpecialHtmlCharacters(false);

            ret.setHeadingComponentAt(i, cap);

        }
        return ret;
    }

    /**
     * This method creates a new Date Display Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param format The display format for the Date Time
     * @see DataStore#setFormat
     */
    public HtmlText newDateDisplay(String table, String column, boolean primaryKey) {
        return newDisplayColumn(table, column, primaryKey, DataStore.DATATYPE_DATE, DATE_FORMAT);
    }

    /**
     * This method creates a new Date Display Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param format The display format for the Date Time.
     * @see DataStore#setFormat
     */
    public HtmlText newDateDisplay(String table, String column, boolean primaryKey, String format) {
        return newDisplayColumn(table, column, primaryKey, DataStore.DATATYPE_DATE, format);
    }

    /**
     * This method creates a new Date Edit Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param size the number of characters to display in the component.
     */
    public HtmlTextEdit newDateEdit(String table, String column, boolean primaryKey, int size) {
        return newEditColumn(table, column, primaryKey, size, 25, DataStore.DATATYPE_DATE, DATE_FORMAT);
    }

    /**
     * This method creates a new Date Time Display Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param format The display format for the Date Time
     * @see DataStore#setFormat
     */
    public HtmlText newDateTimeDisplay(String table, String column, boolean primaryKey) {
        return newDisplayColumn(table, column, primaryKey, DataStore.DATATYPE_DATETIME, DATETIME_FORMAT);
    }

    /**
     * This method creates a new Date Time Display Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param format The display format for the Date Time.
     * @see DataStore#setFormat
     */
    public HtmlText newDateTimeDisplay(String table, String column, boolean primaryKey, String format) {
        return newDisplayColumn(table, column, primaryKey, DataStore.DATATYPE_DATETIME, format);
    }

    /**
     * This method creates a new DateTime Text Edit Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param size The number of characters to display in the component.
     */

    public HtmlTextEdit newDateTimeEdit(String table, String column, boolean primaryKey, int size) {
        return newEditColumn(table, column, primaryKey, size, 25, DataStore.DATATYPE_DATETIME, DATETIME_FORMAT);
    }

    /**
     * This method creates a new DateTime Text Edit Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param size The number of characters to display in the component.
     * @param format The display format for the date time.
     * @see DataStore#setFormat
     */

    public HtmlTextEdit newDateTimeEdit(String table, String column, boolean primaryKey, int size, String format) {
        return newEditColumn(table, column, primaryKey, size, 25, DataStore.DATATYPE_DATETIME, format);
    }

    /**
     * This method creates a new caption for a detail screen.
     * @param caption The text for the caption.
     */
    public HtmlText newDetailCaption(String caption) {
        return new HtmlText(caption, HtmlText.FONT_COLUMN_CAPTION, _page, _theme);
    }

    /**
     * This method creates a new caption for a detail screen.
     * @param name The name for the caption.
     * @param caption The text for the caption.
     */
    public HtmlText newDetailCaption(String name, String caption) {
        return new HtmlText(name, caption, HtmlText.FONT_COLUMN_CAPTION, _page, _theme);
    }

    /**
     * This method was created in VisualAge.
     * @return com.salmonllc.html.HtmlTextEdit
     * @param table java.lang.String
     * @param column java.lang.String
     * @param primaryKey boolean
     * @param size int
     * @param length int
     */
    private HtmlText newDisplayBucket(String bucket, int datatype, String format) {
        HtmlText ret = new HtmlText(bucket, "", HtmlText.FONT_DEFAULT, _page, _theme);
        _ds.addBucket(bucket, datatype);
        try {
            ret.setExpression(_ds, bucket, format);
        } catch (Exception e) {
        }

        return ret;
    }

    /**
     * This method was created in VisualAge.
     * @return com.salmonllc.html.HtmlTextEdit
     * @param table java.lang.String
     * @param column java.lang.String
     * @param primaryKey boolean
     * @param size int
     * @param length int
     */
    private HtmlText newDisplayColumn(String table, String column, boolean primaryKey, int datatype, String format) {
        HtmlText ret = new HtmlText(table + "_" + column, "", HtmlText.FONT_DEFAULT, _page, _theme);
        _ds.addColumn(table, column, datatype, primaryKey, true);
        try {
            ret.setExpression(_ds, table + "." + column, format);
        } catch (Exception e) {
        }

        return ret;
    }

    /**
     * This method creates a new Double Display Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     */
    public HtmlText newDoubleDisplay(String table, String column, boolean primaryKey) {
        return newDisplayColumn(table, column, primaryKey, DataStore.DATATYPE_DOUBLE, CURRENCY_FORMAT);
    }

    /**
     * This method creates a new Double Display Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param format The display format for the double.
     * @see DataStore#setFormat
     */
    public HtmlText newDoubleDisplay(String table, String column, boolean primaryKey, String format) {
        return newDisplayColumn(table, column, primaryKey, DataStore.DATATYPE_DOUBLE, format);
    }

    /**
     * This method creates a new Double Edit Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param size the number of characters to display in the component.
     */

    public HtmlTextEdit newDoubleEdit(String table, String column, boolean primaryKey, int size) {
        return newEditColumn(table, column, primaryKey, size, 25, DataStore.DATATYPE_DOUBLE, CURRENCY_FORMAT);
    }

    /**
     * This method creates a new Double Edit Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param size the number of characters to display in the component.
     * @param format The display format for the Double.
     * @see DataStore#setFormat
     */

    public HtmlTextEdit newDoubleEdit(String table, String column, boolean primaryKey, int size, String format) {
        return newEditColumn(table, column, primaryKey, size, 25, DataStore.DATATYPE_DOUBLE, format);
    }

    /**
     * This method was created in VisualAge.
     * @return com.salmonllc.html.HtmlTextEdit
     * @param table java.lang.String
     * @param column java.lang.String
     * @param primaryKey boolean
     * @param size int
     * @param length int
     */
    private HtmlTextEdit newEditColumn(String table, String column, boolean primaryKey, int size, int length, int datatype, String format) {
        HtmlTextEdit ret = new HtmlTextEdit(table + "_" + column, _theme, _page);
        if (_vl != null)
            ret.addValueChangedListener(_vl);
        ret.setSize(size);
        ret.setMaxLength(length);
        _ds.addColumn(table, column, datatype, primaryKey, true);
        ret.setColumn(_ds, table + "." + column);
        if (format != null) {
            try {
                _ds.setFormat(table + "." + column, format);
            } catch (Exception e) {
            }
        }
        return ret;
    }

    /**
     * Use this method to create an e-mail (send to) link.
     * @param name The name for the component.
     * @param text The Text to display under the link.
     * @param address The address of the person to send the mail to.
     */
    public HtmlLink newEmailLink(String name, String text, String address) {
        HtmlLink l = new HtmlLink(name, "mailto:" + address, _page);
        HtmlText t = new HtmlText(text, HtmlText.FONT_LINK, _page, _theme);
        l.add(t);
        return l;
    }

    /**
     * Use this method to create an e-mail (mail to) link.
     * @param name The name for the component.
     * @param text The Text to display under the link.
     * @param address The address of the person to send the mail to.
     * @param font The Font to use (HtmlText.FONT_...).
     */
    public HtmlLink newEmailLink(String name, String text, String address, String font) {
        HtmlLink l = new HtmlLink(name, "mailto:" + address, _page);
        HtmlText t = new HtmlText(text, font, _page, _theme);
        l.add(t);
        return l;
    }

    /**
     * This method creates a new String Display Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param format The display format for the integer.
     * @see DataStore#setFormat
     */
    public HtmlLink newEMailLink(String table, String column, String font, boolean primaryKey) {
        HtmlText t = newStringDisplay(table, column, primaryKey);
        t.setFont(font);
        HtmlLink l = new HtmlLink(table + "_" + column, "", "", _page);
        try {
            l.setHrefExpression(_ds, "'MailTo:'+contact.email_address");
        } catch (Exception e) {
        }
        l.add(t);
        return l;
    }

    public HtmlLink newEMailLink(String table, String column, boolean primaryKey) {
        HtmlText t = newStringDisplay(table, column, primaryKey);
        HtmlLink l = new HtmlLink(table + "_" + column, "", "", _page);
        try {
            l.setHrefExpression(_ds, "'MailTo:'+contact.email_address");
        } catch (Exception e) {
        }
        l.add(t);
        return l;
    }

    /**
     * This method creates a new Float Edit Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param size the number of characters to display in the component.
     * @param format The display format for the Float.
     * @see DataStore#setFormat
     */
    public HtmlTextEdit newFloatEdit(String table, String column, boolean primaryKey, int size, String format) {
        return newEditColumn(table, column, primaryKey, size, 25, DataStore.DATATYPE_FLOAT, format);
    }

    /**
     * This method creates a new caption for a detail screen.
     * @param caption The text for the caption.
     */
    public HtmlText newHighlightCaption(String name, String caption) {
        return new HtmlText(name, caption, HtmlText.FONT_EMPHASIS, _page, _theme);
    }

    /**
     * Constructs an HtmlLink component containing an image.
     * @return HtmlLink
     * @param name		The name of the link.
     * @param source	The source for the image.
     * @param href		The URL for the link.
     * @param target	The target for the link.
     * @param p			The page the link will go in.
     */
    public static HtmlLink newImageHyperLink(String name, String source, String href, String target, HtmlPage p) throws Exception {
        HtmlLink link = new HtmlLink(name, href, target, p);
        HtmlImage linkImage = new HtmlImage(name + "_image", source, p);
        link.add(linkImage);
        return link;
    }

    /**
     * Use this method to create a image button link that changes it's gif or jpeg when the mouse passes over it.
     * @param name The name for the component.
     * @param normalImage The url of the image used when the mouse is not on the component
     * @param highlightImage The url of the image used when the mouse is on the component
     * @param href The link to go to when the image is clicked
     * @param target The target frame to use
     */
    public HtmlLink newImageLink(String name, String normalImage, String highlightImage, String href, String target) {
        HtmlLink l = new HtmlLink("", href, target, _page);
        HtmlImage i = new HtmlImage(name, normalImage, _page);
        if (highlightImage != null && !normalImage.equals(highlightImage)) {
            l.setOnMouseOver("document." + i.getFullName() + ".src='" + highlightImage + "';");
            l.setOnMouseOut("document." + i.getFullName() + ".src='" + normalImage + "';");
        }

        l.add(i);
        return l;
    }

    /**
     * This creates a integer bucket.
     */
    public HtmlText newIntegerBucket(String bucket) {
        return newDisplayBucket(bucket, DataStore.DATATYPE_INT, null);
    }

    /**
     * This creates a integer bucket.
     */
    public HtmlText newIntegerBucket(String bucket, String format) {
        return newDisplayBucket(bucket, DataStore.DATATYPE_INT, format);
    }

    /**
     * This method creates a new Check Box for an integer column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param int trueValue The value of the check box if it is checked.
     * @param int falseValue The value of the check box if it is not checked.
     */
    public HtmlCheckBox newIntegerCheckBox(String table, String column, boolean primaryKey, int trueValue, int falseValue) {
        String t = new Integer(trueValue).toString();
        String f = new Integer(falseValue).toString();
        HtmlCheckBox ret = new HtmlCheckBox(table + "_" + column, _theme, _page, t, f);
        if (_vl != null)
            ret.addValueChangedListener(_vl);
        _ds.addColumn(table, column, DataStore.DATATYPE_INT, primaryKey, true);
        ret.setColumn(_ds, table + "." + column);
        return ret;
    }

    /**
     * This method creates a new Integer Display Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     */
    public HtmlText newIntegerDisplay(String table, String column, boolean primaryKey) {
        return newDisplayColumn(table, column, primaryKey, DataStore.DATATYPE_INT, null);
    }

    /**
     * This method creates a new Integer Display Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param format The display format for the integer.
     * @see DataStore#setFormat
     */
    public HtmlText newIntegerDisplay(String table, String column, boolean primaryKey, String format) {
        return newDisplayColumn(table, column, primaryKey, DataStore.DATATYPE_INT, format);
    }

    /**
     * This method creates a new Drop Down List Box for an integer column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param int[] values A list of values for the column.
     * @param String[] dispValues A list of corresponding display values for each of the values for the column.
     */
    public HtmlDropDownList newIntegerDropDownList(String table, String column, boolean primaryKey, int[] values, String[] displayValues) {
        HtmlDropDownList ret = new HtmlDropDownList(table + "_" + column, _theme, _page);
        if (_vl != null)
            ret.addValueChangedListener(_vl);
        _ds.addColumn(table, column, DataStore.DATATYPE_INT, primaryKey, true);
        ret.setColumn(_ds, table + "." + column);

        for (int i = 0; i < values.length; i++) {
            String value = new Integer(values[i]).toString();
            String displayValue = "Value " + i;
            if (i < displayValues.length)
                displayValue = displayValues[i];
            ret.addOption(value, displayValue);
        }
        return ret;
    }

    /**
     * This method creates a new Integer Edit Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param size The number of characters to display in the component.
     */
    public HtmlTextEdit newIntegerEdit(String table, String column, boolean primaryKey, int size) {
        return newEditColumn(table, column, primaryKey, size, 25, DataStore.DATATYPE_INT, null);
    }

    /**
     * This method creates a new Integer Edit Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param size The number of characters to display in the component.
     * @param format The display format for the date time.
     * @see DataStore#setFormat
     */
    public HtmlTextEdit newIntegerEdit(String table, String column, boolean primaryKey, int size, String format) {
        return newEditColumn(table, column, primaryKey, size, 25, DataStore.DATATYPE_INT, format);
    }

    /**
     * This method creates a new Radio Button Group an integer column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param int[] values A list of values for the column.
     * @param String[] dispValues A list of corresponding display values for each of the values for the column.
     */
    public HtmlRadioButtonGroup newIntegerRadioButtonGroup(String table, String column, boolean primaryKey, int[] values, String[] displayValues) {
        HtmlRadioButtonGroup ret = new HtmlRadioButtonGroup(table + "_" + column, _theme, _page);
        if (_vl != null)
            ret.addValueChangedListener(_vl);
        _ds.addColumn(table, column, DataStore.DATATYPE_INT, primaryKey, true);
        ret.setColumn(_ds, table + "." + column);

        for (int i = 0; i < values.length; i++) {
            String value = new Integer(values[i]).toString();
            String displayValue = "Value " + i;
            if (i < displayValues.length)
                displayValue = displayValues[i];
            ret.addOption(value, displayValue);
        }
        return ret;
    }

    /**
     * This method creates a new Long Edit Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param size The number of characters to display in the component.
     * @param format The display format for the date time.
     * @see DataStore#setFormat
     */
    public HtmlTextEdit newLongEdit(String table, String column, boolean primaryKey, int size, String format) {
        return newEditColumn(table, column, primaryKey, size, 25, DataStore.DATATYPE_LONG, format);
    }

    /**
     * This method creates a new Multi Line Edit for a string column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param columns The number of characters to display across in the component.
     * @param rows The number of characters to display down in the component.
     * @param maxLength The maximum number of characters the user can enter into the component.
     */
    public HtmlMultiLineTextEdit newMultiLineEdit(String table, String column, boolean primaryKey, int columns, int rows, int maxLength) {
        HtmlMultiLineTextEdit ret = new HtmlMultiLineTextEdit(table + "_" + column, _theme, _page);
        if (_vl != null)
            ret.addValueChangedListener(_vl);
        ret.setColumns(columns);
        ret.setRows(rows);
        ret.setMaxLength(maxLength);
        _ds.addColumn(table, column, DataStore.DATATYPE_STRING, primaryKey, true);
        ret.setColumn(_ds, table + "." + column);
        return ret;
    }

    /**
     * This method creates a new Short Edit Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param size The number of characters to display in the component.
     * @param format The display format for the date time.
     * @see DataStore#setFormat
     */
    public HtmlTextEdit newShortEdit(String table, String column, boolean primaryKey, int size, String format) {
        return newEditColumn(table, column, primaryKey, size, 25, DataStore.DATATYPE_SHORT, format);
    }

    /**
     * This creates a string bucket.
     */
    public HtmlText newStringBucket(String bucket) {
        return newDisplayBucket(bucket, DataStore.DATATYPE_STRING, null);
    }

    /**
     * This method creates a new Check Box for an String column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param int trueValue The value of the check box if it is checked.
     * @param int falseValue The value of the check box if it is not checked.
     */
    public HtmlCheckBox newStringCheckBox(String table, String column, boolean primaryKey, String trueValue, String falseValue) {
        HtmlCheckBox ret = new HtmlCheckBox(table + "_" + column, _theme, _page, trueValue, falseValue);
        if (_vl != null)
            ret.addValueChangedListener(_vl);
        _ds.addColumn(table, column, DataStore.DATATYPE_STRING, primaryKey, true);
        ret.setColumn(_ds, table + "." + column);
        return ret;
    }

    /**
     * This method creates a new String Display Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param format The display format for the integer.
     * @see DataStore#setFormat
     */
    public HtmlText newStringDisplay(String table, String column, boolean primaryKey) {
        return newDisplayColumn(table, column, primaryKey, DataStore.DATATYPE_STRING, null);
    }

    /**
     * This method creates a new Drop Down List Box for an String column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param String[] values A list of values for the column.
     * @param String[] dispValues A list of corresponding display values for each of the values for the column.
     */
    public HtmlDropDownList newStringDropDownList(String table, String column, boolean primaryKey, String[] values, String[] displayValues) {
        HtmlDropDownList ret = new HtmlDropDownList(table + "_" + column, _theme, _page);
        if (_vl != null)
            ret.addValueChangedListener(_vl);
        _ds.addColumn(table, column, DataStore.DATATYPE_STRING, primaryKey, true);
        ret.setColumn(_ds, table + "." + column);

        for (int i = 0; i < values.length; i++) {
            String value = values[i];
            String displayValue = "Value " + i;
            if (i < displayValues.length)
                displayValue = displayValues[i];
            ret.addOption(value, displayValue);
        }
        return ret;
    }

    /**
     * This method creates a new String Edit Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param size the number of characters to display in the component.
     * @param length The maximum number of characters the user can enter into the component.
     */
    public HtmlTextEdit newStringEdit(String table, String column, boolean primaryKey, int size, int length) {
        return newEditColumn(table, column, primaryKey, size, length, DataStore.DATATYPE_STRING, null);
    }

    /**
     * This method creates a new Radio Button Group a String column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param String[] values A list of values for the column.
     * @param String[] dispValues A list of corresponding display values for each of the values for the column.
     */
    public HtmlRadioButtonGroup newStringRadioButtonGroup(String table, String column, boolean primaryKey, String[] values, String[] displayValues) {
        HtmlRadioButtonGroup ret = new HtmlRadioButtonGroup(table + "_" + column, _theme, _page);
        if (_vl != null)
            ret.addValueChangedListener(_vl);
        _ds.addColumn(table, column, DataStore.DATATYPE_STRING, primaryKey, true);
        ret.setColumn(_ds, table + "." + column);

        for (int i = 0; i < values.length; i++) {
            String value = values[i];
            String displayValue = "Value " + i;
            if (i < displayValues.length)
                displayValue = displayValues[i];
            ret.addOption(value, displayValue);
        }
        return ret;
    }

    /**
     * This method creates a new submit button.
     * @param buttonName The name that identifies the button.
     * @param displayCaption The caption to put on the button.
     */
    public HtmlSubmitButton newSubmitButton(String buttonName, String displayCaption) {
        HtmlSubmitButton submit = new HtmlSubmitButton(buttonName, displayCaption, _theme, _page);
        if (_sl != null)
            submit.addSubmitListener(_sl);
        return submit;
    }

    /**
     * This method creates a new submit image.
     * @param buttonName The name that identifies the button.
     * @param displayCaption The caption to put on the button.
     */
    public HtmlSubmitImage newSubmitImage(String buttonName, String displayCaption) {
        HtmlSubmitImage submit = new HtmlSubmitImage(buttonName, displayCaption, 24, _theme, _page);
        if (_sl != null)
            submit.addSubmitListener(_sl);
        return submit;
    }

    /**
     * This method creates a new submit image.
     * @param buttonName The name that identifies the button.
     * @param displayCaption The caption to put on the button.
     * @param height The height to make the button
     */
    public HtmlSubmitImage newSubmitImage(String buttonName, String displayCaption, int height) {
        HtmlSubmitImage submit = new HtmlSubmitImage(buttonName, displayCaption, height, _theme, _page);
        if (_sl != null)
            submit.addSubmitListener(_sl);
        return submit;
    }

    /**
     * This method creates a new submit button.
     * @param buttonName The name that identifies the button.
     * @param displayCaption The caption to put on the button.
     * @param width The width to make the button
     * @param height The width to make the button
     */
    public HtmlSubmitImage newSubmitImage(String buttonName, String displayCaption, int width, int height) {
        HtmlSubmitImage submit = new HtmlSubmitImage(buttonName, displayCaption, width, height, _theme, _page);
        if (_sl != null)
            submit.addSubmitListener(_sl);
        return submit;
    }

    /**
     * This method creates a new Sum Column for the DataStore.
     * @param name The name of the compute Expression.
     * @param column The column to sum.
     * @param format The format to display the results.
     * @see DataStoreEvaluator
     * @see DataStore#setFormat
     */
    public HtmlText newSumColumn(String name, String column, String format) {
        HtmlText computed = new HtmlText(name, "", HtmlText.FONT_DEFAULT, _page, _theme);
        try {
            computed.setExpression(_ds, column, HtmlText.AGGREGATE_SUM, format);
        } catch (Exception e) {
            computed.setText(e.getMessage());
        }
        return computed;
    }

    /**
     * This method creates a new caption for the heading of an HTMLDataTable.
     * @param caption The text for the caption.
     */
    public HtmlText newTableCaption(String caption) {
        return new HtmlText(caption, HtmlText.FONT_TABLE_HEADING, _page, _theme);
    }

    /**
     * This method creates a new caption for the heading of an HTMLDataTable.
     * @param name The name for the component.
     * @param caption The text for the caption.
     */
    public HtmlText newTableCaption(String name, String caption) {
        return new HtmlText(name, caption, HtmlText.FONT_TABLE_HEADING, _page, _theme);
    }

    /**
     * Constructs an HtmlLink component containing a text caption.
     * @return HtmlLink
     * @param name		The name of the link.
     * @param href		The URL for the link.
     * @param caption	The text caption for the link.
     * @param p			The page the link will go in.
     */
    public static HtmlLink newTextHyperLink(String name, String href, String caption, HtmlPage p) {
        return newTextHyperLink(name, href, null, caption, p);
    }

    /**
     * Constructs an HtmlLink component containing a text caption.
     * @return HtmlLink
     * @param name		The name of the link.
     * @param href		The URL for the link.
     * @param target	The target for the link.
     * @param caption	The text caption for the link.
     * @param p			The page the link will go in.
     */
    public static HtmlLink newTextHyperLink(String name, String href, String target, String caption, HtmlPage p) {
        return newTextHyperLink(name, href, target, caption, HtmlText.FONT_LINK, p);
    }

    /**
     * Constructs an HtmlLink component containing a text caption.
     * @return HtmlLink
     * @param name		The name of the link.
     * @param href		The URL for the link.
     * @param target	The target for the link.
     * @param caption	The text caption for the link.
     * @param linkFont	The Font to use for the link
     * @param p			The page the link will go in.
     */
    public static HtmlLink newTextHyperLink(String name, String href, String target, String caption, String linkFont, HtmlPage p) {
        HtmlLink link = new HtmlLink(name, href, target, p);
        HtmlText linkText = new HtmlText(caption, linkFont, p);
        link.add(linkText);
        return link;
    }

    /**
     * Constructs an HtmlLink component containing a text caption Using a small link font.
     * @return HtmlLink
     * @param name		The name of the link.
     * @param href		The URL for the link.
     * @param caption	The text caption for the link.
     * @param p			The page the link will go in.
     */
    public static HtmlLink newTextHyperLinkSmall(String name, String href, String caption, HtmlPage p) {
        return newTextHyperLink(name, href, null, caption, "SmallLinkFont", p);
    }

    /**
     * This method creates a new Time Edit Column.
     * @param table The table that the column is in.
     * @param column The data column.
     * @param primaryKey True if the column is part of the primary key.
     * @param size the number of characters to display in the component.
     */
    public HtmlTextEdit newTimeEdit(String table, String column, boolean primaryKey, int size) {
        return newEditColumn(table, column, primaryKey, size, 25, DataStore.DATATYPE_TIME, TIME_FORMAT);
    }

    

    /**
     * This method returns an HtmlTableCellProperties object with the colspan attribute set.
     */
    public static HtmlTableCellProperties newColSpan(int spanSize) {
        HtmlTableCellProperties span = new HtmlTableCellProperties();
        span.setColumnSpan(spanSize);
        return span;
    }

    /**
     * This method returns a text component bound to a column in a table
     */
    public static HtmlText newDataText(DataStore ds, String table_col, HtmlPage p) {
        return newDataText(ds, table_col, null, p);
    }

    /**
     * This method returns a text component bound to a column in a table
     */
    public static HtmlText newDataText(DataStore ds, String table_col, String format, HtmlPage p) {
        HtmlText textComp = null;
        try {
            textComp = new HtmlText(table_col, "", HtmlText.FONT_DEFAULT_DISPLAY_DATA, p);
            if (ds != null) {
                textComp.setExpression(ds, table_col, format);
            }
        } catch (Exception e) {
            MessageLog.writeErrorMessage("newDataText", e, null);
        }
        return textComp;
    }

    /**
     * This method returns a table heading caption
     */
    public static HtmlText newHeadingCaption(String caption, HtmlPage p) {
        return newHeadingCaption("", caption, p);
    }

    /**
     * This method returns a table heading caption
     */
    public static HtmlText newHeadingCaption(String name, String caption, HtmlPage p) {
        return new HtmlText(name, caption, HtmlText.FONT_TABLE_HEADING, p);
    }

    /**
     * This method returns a table caption
     */
    public static HtmlText newTableCaption(String caption, HtmlPage p) {
        return newTableCaption("", caption, p);
    }

    /**
     * This method returns a table caption
     */
    public static HtmlText newTableCaption(String name, String caption, HtmlPage p) {
        return new HtmlText(name, caption + ":", HtmlText.FONT_COLUMN_CAPTION, p);
    }

    /**
     * This method returns a text field containing a fixed number of blank spaces
     */
    public static HtmlText newTextSpacer(int spacerSize, HtmlPage p) {
        StringBuffer spacerStr = new StringBuffer();

        // Create the spacer string - which consists of a series of nbsp's which will take up space but not print
        for (int i = 0; i < spacerSize; i++) {
            spacerStr.append("&nbsp;");
        }
        HtmlText spacer = new HtmlText(spacerStr.toString(), p);
        spacer.setFixSpecialHtmlCharacters(false);
        return spacer;
    }

    /**
     *	This method creates a new HTML Table, and is created on the HTML page that is passed into this method.
     *	@param name java.lang.String name of the HTML Table
     *	@param p HtmlPage the HTML page on which this component will be created
     *	@param width int Width of the table
     *	@return com.salmonllc.html.HtmlTable
     */
    public static HtmlTable newTable(String name, HtmlPage p, int width) {
        HtmlTable table = new HtmlTable(name, p);
        table.setSizeOption(HtmlTable.SIZE_PERCENT);
        table.setWidth(width);
        return table;
    }
}
